input_text="A"*64

KEY_PERMUTE_TABLE = [57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4]

CD_PERMUTE_TABLE = [14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32]

HEX_MAP = {'0': "0000",
          '1': "0001",
          '2': "0010",
          '3': "0011",
          '4': "0100",
          '5': "0101",
          '6': "0110",
          '7': "0111",
          '8': "1000",
          '9': "1001",
          'A': "1010",
          'B': "1011",
          'C': "1100",
          'D': "1101",
          'E': "1110",
          'F': "1111"}

def hex_to_bin(hex):
  bin = ''
  for h in hex.upper():
    bin += HEX_MAP[h]
  return bin

def process_key(key_64):
  if len(key_64) != 16:
    raise ValueError("Encryption key is not valid. Must be length 16.")

  bin_key_64 = hex_to_bin(key_64)
  
  ret_key_56 = ''
  for i in KEY_PERMUTE_TABLE:
    ret_key_56 += bin_key_64[i-1]
  return ret_key_56

def create_k_set(key_64):
  key_56 = process_key(key_64)

  c = key_56[:28]
  d = key_56[28:]

  shift_schedule = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

  k_list = []

  for shift in shift_schedule:
    c = c[shift:] + c[:shift]
    d = d[shift:] + d[:shift]

    k = ''
    cd = c + d
    for index in CD_PERMUTE_TABLE:
      k += cd[index-1]
    k_list.append(k)
  return k_list

key = "41bb1d42fa2efefa"
#key = "41BB1D42FA2EFEFA"
#key="0E329232EA6D0D73"
create_k_set(key)

#darius code

def encrypt_64(M = "0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111".replace(" ",""),decrypt=False,K=create_k_set(key)):

  if K is None:
    K=[ "000110 110000 001011 101111 111111 000111 000001 110010".replace(" ","")
    , "011110 011010 111011 011001 110110 111100 100111 100101".replace(" ","")
    , "010101 011111 110010 001010 010000 101100 111110 011001".replace(" ","")
    , "011100 101010 110111 010110 110110 110011 010100 011101".replace(" ","")
    ,"011111 001110 110000 000111 111010 110101 001110 101000".replace(" ","")
    , "011000 111010 010100 111110 010100 000111 101100 101111".replace(" ","")
    , "111011 001000 010010 110111 111101 100001 100010 111100".replace(" ","")
    , "111101 111000 101000 111010 110000 010011 101111 111011".replace(" ","")
    , "111000 001101 101111 101011 111011 011110 011110 000001".replace(" ","")
    , "101100 011111 001101 000111 101110 100100 011001 001111".replace(" ","")
    , "001000 010101 111111 010011 110111 101101 001110 000110".replace(" ","")
    , "011101 010111 000111 110101 100101 000110 011111 101001".replace(" ","")
    ,"100101 111100 010111 010001 111110 101011 101001 000001".replace(" ","")
    , "010111 110100 001110 110111 111100 101110 011100 111010".replace(" ","")
    , "101111 111001 000110 001101 001111 010011 111100 001010".replace(" ","")
    , "110010 110011 110110 001011 000011 100001 011111 110101".replace(" ","")]

  if decrypt:
    K=list(reversed(K))
  IP = [58, 50, 42, 34, 26, 18, 10, 2,
        60, 52, 44, 36, 28, 20, 12, 4,
        62, 54, 46, 38, 30, 22, 14, 6,
        64, 56, 48, 40, 32, 24, 16, 8,
        57, 49, 41, 33, 25, 17, 9, 1,
        59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5,
        63, 55, 47, 39, 31, 23, 15, 7]

  def do_IP(text):
    output=""
    for i in IP:
      output+=text[i-1]
    return output

  E_BIT_SELECTION_TABLE = [32, 1, 2, 3, 4, 5, 4, 5,
          6, 7, 8, 9, 8, 9, 10, 11,
          12, 13, 12, 13, 14, 15, 16, 17,
          16, 17, 18, 19, 20, 21, 20, 21,
          22, 23, 24, 25, 24, 25, 26, 27,
          28, 29, 28, 29, 30, 31, 32, 1]

  def E_func(text):
    output=""
    for i in E_BIT_SELECTION_TABLE:
      output+=text[i-1]
    return output


  IP_text = "1100 1100 0000 0000 1100 1100 1111 1111 1111 0000 1010 1010 1111 0000 1010 1010".replace(" ","")
  #print(IP_text)
  IP_text=do_IP(M)
  #print(do_IP(M))

  def change_to_be_hex(s):
      return int(s,base=2)
      
  def xor_two_str(str1,str2):
      a = change_to_be_hex(str1)
      b = change_to_be_hex(str2)
      output=str(bin(a ^ b))[2:]
      return "0"*(len(str1)-len(output))+output

  L,R=[IP_text[:32]],[IP_text[32:]]



  #print(R[0])
  #print("011110 100001 010101 010101 011110 100001 010101 010101".replace(" ",""))
  #print(E_func(R[0]).replace(" ",""))

  s1_8 = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
          [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
          [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
          [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],
  
          [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
          [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
          [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
          [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],
  
          [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
          [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
          [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
          [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],
  
          [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
          [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
          [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
          [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],
  
          [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
          [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
          [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
          [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],
  
          [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
          [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
          [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
          [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],
  
          [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
          [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
          [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
          [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],
  
          [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
          [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
          [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
          [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]



  def int_to_str(x):
    return {0: "0000",1: "0001",2: "0010",3: "0011",4: "0100",5: "0101",6: "0110",7: "0111",8: "1000",9: "1001",10: "1010",11: "1011",12: "1100", 13: "1101", 14: "1110", 15: "1111"}.get(x)

  P = [16,  7, 20, 21,
        29, 12, 28, 17,
        1, 15, 23, 26,
        5, 18, 31, 10,
        2,  8, 24, 14,
        32, 27,  3,  9,
        19, 13, 30,  6,
        22, 11,  4, 25]

  def F_func(E,K):
    temp=xor_two_str(E,K)
    output=""
    for i in range(0,len(temp),6):
      output+=int_to_str(s1_8[i//6][int(temp[i:i+1]+temp[i+5:i+6],base=2)][int(temp[i+1:i+5],base=2)])
    final_output=""
    for i in P:
      final_output+=output[i-1]
    return final_output


  #print("0010 0011 0100 1010 1010 1001 1011 1011".replace(" ",""))
  #print(F_func(E_func(R[-1]),K[0]))

  for i in range(1,17):
    L.append(R[-1])
    R.append(xor_two_str(L[-2],F_func(E_func(R[-1]),K[i-1])))

  IP_1 = [40, 8, 48, 16, 56, 24, 64, 32,
                39, 7, 47, 15, 55, 23, 63, 31,
                38, 6, 46, 14, 54, 22, 62, 30,
                37, 5, 45, 13, 53, 21, 61, 29,
                36, 4, 44, 12, 52, 20, 60, 28,
                35, 3, 43, 11, 51, 19, 59, 27,
                34, 2, 42, 10, 50, 18, 58, 26,
                33, 1, 41, 9, 49, 17, 57, 25]

  def IP_1_perm(text):
    output=""
    for i in IP_1:
      output+=text[i-1]
    return output
  #print("00001010 01001100 11011001 10010101 01000011 01000010 00110010 00110100".replace(" ",""))
  #print(len(R),len(L))
  #print(R[-1]+L[-1])
  #print(IP_1_perm(R[-1]+L[-1]))
  #print("10000101 11101000 00010011 01010100 00001111 00001010 10110100 00000101".replace(" ",""))

  return IP_1_perm(R[-1]+L[-1])
  
binary_text=hex_to_bin("DE7BA69CDF0E9E82EA0BB3CE65BC530C884966BEEC070B705B1C310E38ECE1DC10061A42988600374016675F2802B1E2FC8D4D9D3E24DF79DA302A4DD079641233D8DC6D76BC24F59E52DA0D23269EE6EF4C249A920D76CD")
def eric(x):
  output=""
  for i in range(16):
     output+=str(int(x%2))
     x/=2
  return output

for i in range(0,65000):
  if i%100==0:
      print(i)
  key=hex(int("110010100101010111100000001000001000000100110100"+eric(i), 2))[2:]
  final_text=""
  for i in range(0,len(binary_text),64):  
    final_text+=encrypt_64(M =binary_text[i:i+64] ,decrypt=True,K=create_k_set(key))
  #print("final", hex(int(final_text,2)))

  #print(hex(int(final_text, 2))[2:])

  

  try:
    bytes_object = bytes.fromhex(hex(int(final_text, 2))[2:]).upper()
    ascii_string = bytes_object.decode("ASCII")
    if ascii_string[:30].replace(" ","").isalpha():
        print(ascii_string)
  except:
    pass

